hacin = hacin[grep('^02|^06',hacin$link),]
rena = read_sf('BARRIOS-RPPVAP/Barrios_RPPVAP20200416.shp')
rena = st_make_valid(rena)
#plot(rena['idrenabap'])
row = 78
rena$score_carencia = sapply(1:nrow(rena),function(row){
rena_row = rena[row,]
columnas = c('energia_el','alumbrado_','agua_corri','red_cloaca','red_gas','pavimento')
score = 0
cn = columnas[1]
for(cn in columnas){
datum = rena_row[[cn]]
datum = tolower(datum)
if(is.na(datum)) datum = 'inexistente'
score = score + switch(datum,
'cobertura parcial'=-1,
'inexistente'=-2,
'cobertura total'=0,
'sin dato'=-1)
}
return(score)
})
rena$dens_flias = rena$cantidad_f/rena$superficie
### Ahora datos del censo
##
require(sf)
censo = read_sf('../../../../censo2010/data_censo2010.shp')
#censo = st_transform(censo,crs=st_crs(rena))
rena = st_transform(st_make_valid(rena),crs=st_crs(censo))
rena_inter = st_intersects(st_make_valid(rena),censo)
areas_censo = st_area(censo)
rena$personas_censo2010 = rep(NA,nrow(rena))
rena$hogares_censo2010 = rep(NA,nrow(rena))
q = 1
for(q in 1:nrow(rena)){
rena$personas_censo2010[q]=0
rena$hogares_censo2010[q]=0
censoq = rena_inter[[q]]
interq = st_intersection(rena[q,],censo[censoq,])
r = 1
for(r in 1:length(censoq)){
cq = censoq[r]
iq = interq[r,]
alfa = as.numeric(st_area(iq))/as.numeric(areas_censo[cq])
rena$personas_censo2010[q]=rena$personas_censo2010[q] + alfa*iq$personas
rena$hogares_censo2010[q]=rena$hogares_censo2010[q] + alfa*iq$hogares
# require(leaflet)
# map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
#   addPolygons(data=st_transform(censo[censoq,],crs=4326),popup=~link) %>%
#   addPolygons(data=st_transform(iq,crs=4326),col='red')
# map
}
}
require(sf)
censo_hacin = read_sf('../../../../datasets/hacinamiento_critico_por_radio_censal/hacinamiento_crítico_por_radio_censal.shp')
#censo_hacin = st_transform(censo_hacin,crs=st_crs(rena))
rena = st_transform(st_make_valid(rena),crs=st_crs(censo_hacin))
rena_inter = st_intersects(st_make_valid(rena),censo_hacin)
rena$hacinamien_censo2010 = rep(NA,nrow(rena))
rena$total_hoga_censo2010 = rep(NA,nrow(rena))
rena$mas_de_3.0_censo2010 = rep(NA,nrow(rena))
areas_censo = st_area(censo_hacin)
q = 1
for(q in 1:nrow(rena)){
rena$total_hoga_censo2010[q]=0
rena$mas_de_3.0_censo2010[q]=0
rena$hacinamien_censo2010[q]=0
censoq = rena_inter[[q]]
interq = st_intersection(rena[q,],censo_hacin[censoq,])
r = 1
hacin = 0
for(r in 1:length(censoq)){
cq = censoq[r]
iq = interq[r,]
areaiq = st_area(iq)
alfa = as.numeric(areaiq/areas_censo[cq])
rena$total_hoga_censo2010[q]=rena$total_hoga_censo2010[q] + alfa*iq$total_hoga
rena$mas_de_3.0_censo2010[q]=rena$mas_de_3.0_censo2010[q] + alfa*iq$mas_de_3.0
hacin = hacin + iq$hacinamien*as.numeric(areaiq)
}
hacin = hacin/as.numeric(st_area(rena[q,]))
rena$hacinamien_censo2010[q] = hacin
}
rena$clasif_luciana = ''
# Muy graves
codigos_Mg = c('Tranquila'=0040046,'Inflamable'=0040011,'Diamante'=0040030,'Santa Catalina'=0040029)
# Graves
codigos_g = c('Maciel'=0040012,
'Tierra verde'=0040023,
'el Arroyo'=0040007,
'16 de marzo'=0040003,
'Lealtad'=0040017,
'Rancho grande'=0040025,
'Azul quilmes'=0860007,
'Lujan'=0040018,
'La tierrita'=0040016,
'Lucena y Gral Pico'=0040042,
'7 de enero'=0040001,
'Honor y dignidad'=0040010,
'Madariaga'=0040045,
'Unidad y Lucha'=0040047
)
# Menos grave
codigos_mg = c('Urquiza'=0040051,
'La saladita'=0040015,
'Nueva Ana'=0040021,
'Azul avella'=0040005,
'Modelo'=0040020)
#Mejor
codigos_me = c('Parque'=0040034,
'Matanza y Serna'=0040037,
'Fortin'=0040026)
rena$clasif_luciana[is.element(as.numeric(rena$cod_folio),codigos_g)] = 'grave'
rena$clasif_luciana[is.element(as.numeric(rena$cod_folio),codigos_mg)] = 'menos grave'
rena$clasif_luciana[is.element(as.numeric(rena$cod_folio),codigos_Mg)] = 'muy grave'
rena$clasif_luciana[is.element(as.numeric(rena$cod_folio),codigos_me)] = 'mejor'
table(rena$clasif_luciana)
# Ordenamiento:
## Primero agua, segundo tipo de asentamiento, tercero densidad
orden_agua = c('cobertura total','sin dato','cobertura parcial','inexistente')
orden_tipo = c('otros','asentamiento precario','villa')
agua_corri_score = match(tolower(rena$agua_corri),orden_agua)
tipo_score = match(tolower(rena$tipo),orden_tipo)
orden = order(agua_corri_score,tipo_score,rena$dens_flias,decreasing=T)
rena = rena[orden,]
rena_df = as.data.frame(rena)
rena_df$geometry = NULL
rena_df_luciana = rena_df[rena_df$clasif_luciana!='',]
ord_luc = unlist(sapply(c('muy grave','grave','menos grave','mejor'),function(q) which(rena_df_luciana$clasif_luciana==q)))
rena_df_luciana = rena_df_luciana[ord_luc,]
write.csv(rena_df[,c('agua_corri','tipo','dens_flias','superficie','cantidad_f','clasif_luciana',colnames(rena_df))],'../priori/BARRIOS-RPPVAP_plus_censo2010/rena_full_censos.csv',row.names=F)
write.csv(rena_df_luciana[,c('agua_corri','tipo','dens_flias','superficie','cantidad_f','clasif_luciana',colnames(rena_df))],'../priori/BARRIOS-RPPVAP_plus_censo2010/rena_ordenado_solo_luciana.csv',row.names=F)
### MAPITA PINES
censo_hacin$popup = paste(paste('Codigo:',censo_hacin$link),
paste('Hacinamiento:',censo_hacin$hacinamien),
paste('Hacinamiento:',censo_hacin$total_hoga),
paste('Mas de 3:',censo_hacin$mas_de_3.0),
sep='</br>')
rena$popup = paste(paste('Codigo:',rena$cod_folio),
paste('Nombre:',rena$nombre_ofi),
paste('Hacinamiento:',round(rena$hacinamien_censo2010)),
paste('Mas de 3:',round(rena$mas_de_3.0_censo2010)),
paste('total_hoga:',round(rena$total_hoga_censo2010)),
paste('dens_flias:',round(rena$dens_flias)),
sep='</br>')
require(leaflet)
pal_hacin_censo <- colorNumeric(
palette = c('green','yellow','red'),
domain = censo_hacin$hacinamien
)
pal_hacin_rena <- colorNumeric(
palette = c('green','red'),
domain = rena$hacinamien_censo2010
)
censo_hacin_ = censo_hacin[grep('^02|^06',censo_hacin$link),]
rena_ = read_sf('BARRIOS-RPPVAP/Barrios_RPPVAP20200416.shp')
rena_$hacinamien_censo2010 = rena$hacinamien_censo2010
rena_$mas_de_3.0_censo2010 = rena$mas_de_3.0_censo2010
rena_$hogares_censo2010 = rena$hogares_censo2010
rena_$personas_censo2010 = rena$personas_censo2010
rena_$popup = rena$popup
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data=st_transform(censo_hacin_,crs=4326),popup=~popup,col=~pal_hacin_censo(hacinamien),weight = 1) %>%
addPolygons(data=st_transform(rena_,crs=4326),popup=~popup,col='black',weight = 1) %>%
addLegend("bottomright",data = censo_hacin_, pal = pal_hacin_censo, values = ~hacinamien,title = "Hacinamiento")
htmlwidgets::saveWidget(map,'radios_y_hacinamiento_plusrena.html')
?write.table
# Agregaremos
require(sf)
deptos = read_sf('../../georref/shp/departamentos/censo_por_departamento_polígonos.shp')
deptos = deptos[grep('^02|^06',deptos$link),]
hacin = read_sf('../../../../datasets/hacinamiento_critico_por_radio_censal/hacinamiento_crítico_por_radio_censal.shp')
hacin = hacin[grep('^02|^06',hacin$link),]
rena = read_sf('BARRIOS-RPPVAP/Barrios_RPPVAP20200416.shp')
rena = st_make_valid(rena)
#plot(rena['idrenabap'])
row = 78
rena$score_carencia = sapply(1:nrow(rena),function(row){
rena_row = rena[row,]
columnas = c('energia_el','alumbrado_','agua_corri','red_cloaca','red_gas','pavimento')
score = 0
cn = columnas[1]
for(cn in columnas){
datum = rena_row[[cn]]
datum = tolower(datum)
if(is.na(datum)) datum = 'inexistente'
score = score + switch(datum,
'cobertura parcial'=-1,
'inexistente'=-2,
'cobertura total'=0,
'sin dato'=-1)
}
return(score)
})
rena$dens_flias = rena$cantidad_f/rena$superficie
### Ahora datos del censo
##
require(sf)
censo = read_sf('../../../../censo2010/data_censo2010.shp')
#censo = st_transform(censo,crs=st_crs(rena))
rena = st_transform(st_make_valid(rena),crs=st_crs(censo))
rena_inter = st_intersects(st_make_valid(rena),censo)
areas_censo = st_area(censo)
rena$personas_censo2010 = rep(NA,nrow(rena))
rena$hogares_censo2010 = rep(NA,nrow(rena))
q = 1
for(q in 1:nrow(rena)){
rena$personas_censo2010[q]=0
rena$hogares_censo2010[q]=0
censoq = rena_inter[[q]]
interq = st_intersection(rena[q,],censo[censoq,])
r = 1
for(r in 1:length(censoq)){
cq = censoq[r]
iq = interq[r,]
alfa = as.numeric(st_area(iq))/as.numeric(areas_censo[cq])
rena$personas_censo2010[q]=rena$personas_censo2010[q] + alfa*iq$personas
rena$hogares_censo2010[q]=rena$hogares_censo2010[q] + alfa*iq$hogares
# require(leaflet)
# map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
#   addPolygons(data=st_transform(censo[censoq,],crs=4326),popup=~link) %>%
#   addPolygons(data=st_transform(iq,crs=4326),col='red')
# map
}
}
rena$personas_censo2010 = round(rena$personas_censo2010,2)
rena$hogares_censo2010 = round(rena$hogares_censo2010,2)
require(sf)
censo_hacin = read_sf('../../../../datasets/hacinamiento_critico_por_radio_censal/hacinamiento_crítico_por_radio_censal.shp')
#censo_hacin = st_transform(censo_hacin,crs=st_crs(rena))
rena = st_transform(st_make_valid(rena),crs=st_crs(censo_hacin))
rena_inter = st_intersects(st_make_valid(rena),censo_hacin)
rena$hacinamien_censo2010 = rep(NA,nrow(rena))
rena$mas_de_3.0_censo2010 = rep(NA,nrow(rena))
areas_censo = st_area(censo_hacin)
q = 779
for(q in 1:nrow(rena)){
rena$mas_de_3.0_censo2010[q]=0
rena$hacinamien_censo2010[q]=0
censoq = rena_inter[[q]]
interq = st_intersection(rena[q,],censo_hacin[censoq,])
r = 5
hacin = 0
for(r in 1:length(censoq)){
cq = censoq[r]
iq = interq[r,]
areaiq = st_area(iq)
iq$link
alfa = as.numeric(areaiq)/as.numeric(areas_censo[cq])
alfa
rena$mas_de_3.0_censo2010[q]=rena$mas_de_3.0_censo2010[q] + alfa*iq$mas_de_3.0
hacin = hacin + iq$hacinamien*as.numeric(areaiq)
}
hacin = hacin/as.numeric(st_area(rena[q,]))
rena$hacinamien_censo2010[q] = hacin
}
rena$hacinamien_censo2010 = round(rena$hacinamien_censo2010,2)
rena$mas_de_3.0_censo2010 = round(rena$mas_de_3.0_censo2010rep,2)
rena$clasif_exp = ''
# Muy graves
codigos_Mg = c('Tranquila'=0040046,'Inflamable'=0040011,'Diamante'=0040030,'Santa Catalina'=0040029)
# Graves
codigos_g = c('Maciel'=0040012,
'Tierra verde'=0040023,
'el Arroyo'=0040007,
'16 de marzo'=0040003,
'Lealtad'=0040017,
'Rancho grande'=0040025,
'Azul quilmes'=0860007,
'Lujan'=0040018,
'La tierrita'=0040016,
'Lucena y Gral Pico'=0040042,
'7 de enero'=0040001,
'Honor y dignidad'=0040010,
'Madariaga'=0040045,
'Unidad y Lucha'=0040047
)
# Menos grave
codigos_mg = c('Urquiza'=0040051,
'La saladita'=0040015,
'Nueva Ana'=0040021,
'Azul avella'=0040005,
'Modelo'=0040020)
#Mejor
codigos_me = c('Parque'=0040034,
'Matanza y Serna'=0040037,
'Fortin'=0040026)
rena$clasif_exp[is.element(as.numeric(rena$cod_folio),codigos_g)] = 'grave'
rena$clasif_exp[is.element(as.numeric(rena$cod_folio),codigos_mg)] = 'menos grave'
rena$clasif_exp[is.element(as.numeric(rena$cod_folio),codigos_Mg)] = 'muy grave'
rena$clasif_exp[is.element(as.numeric(rena$cod_folio),codigos_me)] = 'mejor'
table(rena$clasif_exp)
# Ordenamiento:
## Primero agua, segundo tipo de asentamiento, tercero densidad
orden_agua = c('cobertura total','sin dato','cobertura parcial','inexistente')
orden_tipo = c('otros','asentamiento precario','villa')
agua_corri_score = match(tolower(rena$agua_corri),orden_agua)
tipo_score = match(tolower(rena$tipo),orden_tipo)
orden = order(agua_corri_score,tipo_score,rena$dens_flias,decreasing=T)
rena = rena[orden,]
rena_df = as.data.frame(rena)
rena_df$geometry = NULL
rena_df_luciana = rena_df[rena_df$clasif_exp!='',]
ord_luc = unlist(sapply(c('muy grave','grave','menos grave','mejor'),function(q) which(rena_df_luciana$clasif_exp==q)))
rena_df_luciana = rena_df_luciana[ord_luc,]
write.csv(rena_df[,c('agua_corri','tipo','dens_flias','superficie','cantidad_f','clasif_exp',colnames(rena_df))],'../priori/BARRIOS-RPPVAP_plus_censo2010/rena_full_censos.csv',row.names=F)
write.csv(rena_df_luciana[,c('agua_corri','tipo','dens_flias','superficie','cantidad_f','clasif_exp',colnames(rena_df))],'../priori/BARRIOS-RPPVAP_plus_censo2010/rena_ordenado_solo_luciana.csv',row.names=F)
source('~/LABURO/COVID/franco/charla/bayes/priori/sisa/trabajo/paso6.R', echo=TRUE)
source('~/LABURO/Parks/TimeGeo_and Seg_Mob_Analysis/timeGeo/workpath2/comm_bipartite.R', echo=TRUE)
source('~/LABURO/Parks/TimeGeo_and Seg_Mob_Analysis/timeGeo/workpath2/distancias_parques_a_tracts.R', echo=TRUE)
source('~/LABURO/Parks/TimeGeo_and Seg_Mob_Analysis/timeGeo/workpath2/net_analysis.R', echo=TRUE)
source('~/LABURO/Parks/TimeGeo_and Seg_Mob_Analysis/timeGeo/workpath2/tract_home_users.R', echo=TRUE)
require(sf)
require(geojsonsf)
require(igraph)
city='Boston'
source('~/LABURO/Parks/TimeGeo_and Seg_Mob_Analysis/timeGeo/workpath2/prepare_data_for_networks.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/sisa/recupera_bases.R', echo=TRUE)
setwd("~/LABURO/COVID/franco/charla/bayes/priori/sisa")
source('~/LABURO/COVID/franco/charla/bayes/priori/sisa/recupera_bases.R', echo=TRUE)
d_bet = d[is.element(d$IDEVENTOCASO,betina$IDEVENTOCA),]
X = st_coordinates(betina)
X
X[1,]
X[,1]
d_bet$LON_GEOCHE==X[match(betina$IDEVENTOCA,d_bet),1]
cids = intersect(d$IDEVENTOCASO,betina$IDEVENTOCA)
d$LON_GEOCHE[match(cids,d$IDEVENTOCASO)] == X[match(cids,d$IDEVENTOCASO),1]
d$LON_GEOCHE[match(cids,d$IDEVENTOCASO)] == X[match(cids,betina$IDEVENTOCASO),1]
cids
any(is.na(cids))
d$LON_GEOCHE[match(cids,d$IDEVENTOCASO)]
any(is.na(d$LON_GEOCHE[match(cids,d$IDEVENTOCASO)]))
X = st_coordinates(betina)
any(is.na(X[match(cids,betina$IDEVENTOCASO),1]))
d$LON_GEOCHE[match(cids,d$IDEVENTOCASO)] == X[match(cids,betina$IDEVENTOCA),1]
all(d$LON_GEOCHE[match(cids,d$IDEVENTOCASO)] == X[match(cids,betina$IDEVENTOCA),1])
require(leaflet)
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addCircleMarkers(betina,popup=~as.character(IDEVENTOCA))
require(leaflet)
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addCircleMarkers(data=betina,popup=~as.character(IDEVENTOCA))
map
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addCircleMarkers(data=d,lng=~LON_GEOCHE,lat=~LAT_GEOCHE,popup=~as.character(IDEVENTOCA),color = ~ifelse(COMPARACION_ELECTO=='BETI','red','blue'))
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addCircleMarkers(data=d,lng=~LON_GEOCHE,lat=~LAT_GEOCHE,popup=~as.character(IDEVENTOCASO),color = ~ifelse(COMPARACION_ELECTO=='BETI','red','blue'))
map
source('~/LABURO/COVID/franco/charla/bayes/priori/sisa/recupera_bases.R', echo=TRUE)
setwd("~/LABURO/COVID/franco/charla/bayes/priori/rena")
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/casos_en_barrios.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/agrega_extras_a_rena.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/mapas_extras.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/sisa/recupera_bases.R', echo=TRUE)
setwd("~/LABURO/COVID/franco/charla/bayes/priori/sisa")
source('~/LABURO/COVID/franco/charla/bayes/priori/sisa/recupera_bases.R', echo=TRUE)
setwd("~/LABURO/COVID/franco/charla/bayes/priori/rena")
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/casos_en_barrios.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/agrega_extras_a_rena.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/mapas_extras.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/mapas_extras.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/casos_en_barrios.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/agrega_extras_a_rena.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/mapas_extras.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/mapas_extras.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/casos_en_barrios.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/agrega_extras_a_rena.R', echo=TRUE)
source('~/LABURO/COVID/franco/charla/bayes/priori/rena/mapas_extras.R', echo=TRUE)
setwd("/media/olaf/Berdder/olaf/olaf2/LABURO/COVID/franco/charla/bayes/priori")
require(sf)
censo_hacin = read_sf('../../../../datasets/hacinamiento_critico_por_radio_censal/hacinamiento_crítico_por_radio_censal.shp')
df = as.data.frame(censo_hacin)
write.csv(df,'hacin_pines.csv',row.names=F)
censo_hacin$link
cs = censo_hacin[grep('^02|^06',censo_hacin$link),]
plot(cs[1])
df = as.data.frame(censo_hacin)
df$geometry = NULL
df = as.data.frame(cs)
df$geometry = NULL
write.csv(df,'hacin_pines.csv',row.names=F)
require(leaflet)
palHacin = colorNumeric(c('red','yellow','green'),cs$hacinamien)
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data=cs,color = palHacin(cs$hacinamien)) %>%
addLegend(data=cs,values=cs$hacinamien,pal=palHacin)
cs
cs = st_transform(cs,crs=4326)
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data=cs,color = palHacin(cs$hacinamien)) %>%
addLegend(data=cs,values=cs$hacinamien,pal=palHacin)
map
cs$popup = paste('ID:',cs$link,
'Hacin %',cs$hacinamien,
'MasDe3:',cs$mas_de_3.0,
'TotalHoga:',cs$total_hoga,
sep='</br>')
palHacin = colorNumeric(c('red','yellow','green'),cs$hacinamien)
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data=cs,color = palHacin(cs$hacinamien),popup = cs$popup) %>%
addLegend(data=cs,values=cs$hacinamien,pal=palHacin)
map
cs$popup = paste(paste('ID:',cs$link),
paste('Hacin %',cs$hacinamien),
paste('MasDe3:',cs$mas_de_3.0),
paste('TotalHoga:',cs$total_hoga),
sep='</br>')
palHacin = colorNumeric(c('green','yellow','red'),cs$hacinamien)
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data=cs,color = palHacin(cs$hacinamien),popup = cs$popup,stroke = 0.1) %>%
addLegend(data=cs,values=cs$hacinamien,pal=palHacin)
map
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data=cs,color = palHacin(cs$hacinamien),popup = cs$popup,weight = 0.1) %>%
addLegend(data=cs,values=cs$hacinamien,pal=palHacin)
map
require(htmlwidgets)
cs$popup = paste(paste('ID:',cs$link),
paste('Hacin %',cs$hacinamien),
paste('MasDe3:',cs$mas_de_3.0),
paste('TotalHoga:',cs$total_hoga),
sep='</br>')
palHacin = colorNumeric(c('green','red'),cs$hacinamien)
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data=cs,color = palHacin(cs$hacinamien),popup = cs$popup,weight = 0.1) %>%
addLegend(data=cs,values=cs$hacinamien,pal=palHacin)
setwd('~')
getwd()
map = leaflet() %>% addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data=cs,color = palHacin(cs$hacinamien),popup = cs$popup,weight = 0.1) %>%
addLegend(data=cs,values=cs$hacinamien,pal=palHacin)
saveWidget(map,file='hacin_map_pines.html')
saveWidget(map,file='hacin_map_pines.html',selfcontained = F)
df = as.data.frame(cs)
df$geometry = NULL
write.csv(df,'hacin_pines.csv',row.names=F)
st_write(cs,file='hacin_pines.geojson')
st_write(cs,'hacin_pines.geojson')
plot(cs['hacin'])
plot(cs['hacinamien'])
plot(cs['hacinamien'],axes=T)
plot(cs['hacinamien'],axes=T,lwd=0.2)
plot(cs['hacinamien'],axes=T,lwd=0.2,xlim=c(-60,-58),ylim=c(-35,-35))
plot(cs['hacinamien'],axes=T,lwd=0.2,xlim=c(-60,-58),ylim=c(-35,-34))
plot(cs['hacinamien'],axes=T,lwd=0.2,xlim=c(-60,-58),ylim=c(-35.5,-34))
plot(cs['hacinamien'],axes=T,lwd=0.2,xlim=c(-59,-59),ylim=c(-35,-35))
plot(cs['hacinamien'],axes=T,lwd=0.2,xlim=c(-60,-58),ylim=c(-35,-35))
plot(cs['hacinamien'],axes=T,lwd=0.2,xlim=c(-59,-57),ylim=c(-35,-35))
plot(cs['hacinamien'],axes=T,lwd=0.2,xlim=c(-59,-56),ylim=c(-35,-35))
demoData[[city]]$Icom = I
plot(cs['hacinamien'],axes=T,lwd=0.2,xlim=c(-59,-58),ylim=c(-35,-35))
plot(cs['hacinamien'],axes=T,lwd=0.2,xlim=c(-59,-58),ylim=c(-35,-34))
plot(cs['hacinamien'],axes=T,lwd=0.01,xlim=c(-59,-58),ylim=c(-35,-34))
plot(cs['hacinamien'],axes=T,lwd=0.01,xlim=c(-60,-58),ylim=c(-35.5,-34))
pdf('mapas_pines.pdf')
plot(cs['hacinamien'],axes=T,lwd=0.01)
plot(cs['hacinamien'],axes=T,lwd=0.01,xlim=c(-60,-58),ylim=c(-35.5,-34))
plot(cs['hacinamien'],axes=T,lwd=0.01,xlim=c(-59,-58),ylim=c(-35,-34))
dev.off()
plot(cs['hacinamien',grep('^02',cs$link)],axes=T,lwd=0.01,xlim=c(-59,-58),ylim=c(-35,-34))
plot(cs[grep('^02',cs$link),'hacinamien'],axes=T,lwd=0.01,xlim=c(-59,-58),ylim=c(-35,-34))
plot(cs[grep('^02',cs$link),'hacinamien'],axes=T,lwd=0.01)
plot(cs['hacinamien'],axes=T,lwd=0.01,xlim=c(-59,-58),ylim=c(-35,-34))
plot(cs[grep('^02',cs$link),'hacinamien'],axes=T,lwd=0.01,breaks=seq(0,50,5))
pdf('mapas_pines.pdf')
plot(cs['hacinamien'],axes=T,lwd=0.01)
plot(cs['hacinamien'],axes=T,lwd=0.01,xlim=c(-60,-58),ylim=c(-35.5,-34))
plot(cs['hacinamien'],axes=T,lwd=0.01,xlim=c(-59,-58),ylim=c(-35,-34))
plot(cs[grep('^02',cs$link),'hacinamien'],axes=T,lwd=0.01,breaks=seq(0,50,5))
dev.off()
setwd("~/LABURO/RedR-Pen/Estructura/Archivo-Descargas Nuevo/descargas")
cl()
clr()
require(stringr)
require(XML)
if(TRUE){ # sólo correr la primera vez
if(!file.exists('listado')){
download.file('https://cran.r-project.org/web/packages/available_packages_by_name.html','listado')
}
pagina = file.path("listado")
doc<-htmlTreeParse(file.path("listado"))
root <- xmlRoot(doc,skip=FALSE)
# Capturo los nombres de los paquetes
tablas = readHTMLTable(pagina)
paquetes = tablas[[1]]['V1']
paquetes = paquetes[,1]
paq_desc = tablas[[1]]['V2']
paquetes = paquetes[paquetes!='']
# Ahora capturo los links
html = paste(readLines(pagina), collapse="\n")
links = str_match_all(html, "<a href=\"(.*?)\"")[[1]][,1]
links = links[27:length(links)]
links = sub('<a href=\"../..','https://cran.r-project.org',links)
links = sub('\"','',links)
# Para capturar el link de un paquete hago
# grep(paquete,links)
}
clc()
cat(rep("\n", 50))
if(TRUE){ #Sólo correr para descargar los paquetes
if(!dir.exists('paquetes')){
dir.create('paquetes')
}
for(pack in paquetes){
if(!file.exists(paste("paquetes/",pack,sep=''))){
lk = grep(paste("/",pack,"/",sep=''),links,value=TRUE)
download.file(lk,paste("paquetes/",pack,sep=''))
gc()
}
}
}
