<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>CRAN - Package wyz.code.metaTesting</title>
<link rel="stylesheet" type="text/css" href="../../CRAN_web.css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="DC.identifier" content="https://CRAN.R-project.org/package=wyz.code.metaTesting" />
<meta name="DC.publisher" content="Comprehensive R Archive Network (CRAN)" />
<meta name="og:title" content="wyz.code.metaTesting: Wizardry Code Meta Testing" />
<meta name="og:description" content="Meta testing is the ability to test a function without having to provide its parameter values. Those values will be generated, based on semantic naming of parameters, as introduced by package 'wyz.code.offensiveProgramming'. Value generation logic can be completed with your own data types and generation schemes. This to meet your most specific requirements and to answer to a wide variety of usages, from general use case to very specific ones. While using meta testing, it becomes easier to generate stress test campaigns, non-regression test campaigns and robustness test campaigns, as generated tests can be saved and reused from session to session. Main benefits of using 'wyz.code.metaTesting' is ability to discover valid and invalid function parameter combinations, ability to infer valid parameter values, and to provide smart summaries that allows you to focus on dysfunctional cases. " />
<meta name="og:image" content="https://CRAN.R-project.org/CRANlogo.png" />
<meta name="og:type" content="website" />
<meta name="og:url" content="https://CRAN.R-project.org/package=wyz.code.metaTesting" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@_R_Foundation" />
<style type="text/css">
  table td { vertical-align: top; }
</style>
</head>
<body>
<h2>wyz.code.metaTesting: Wizardry Code Meta Testing</h2>
<p>Meta testing is the ability to test a function without having to 
    provide its parameter values.
    Those values will be generated, based on semantic naming of parameters, as 
    introduced by package 'wyz.code.offensiveProgramming'.
    Value generation logic can be completed with your own data types 
    and generation schemes. This to meet your most specific requirements and to 
    answer to a wide variety of usages, from general use case to very specific
    ones.
    While using meta testing, it becomes easier to generate stress test 
    campaigns, non-regression test campaigns and robustness test campaigns, as 
    generated tests can be saved and reused from session to session. 
    Main benefits of using 'wyz.code.metaTesting' is ability to discover valid 
    and invalid function parameter combinations, ability to infer valid 
    parameter values, and to provide smart summaries that allows you to focus
    on dysfunctional cases. </p>
<table summary="Package wyz.code.metaTesting summary">
<tr>
<td>Version:</td>
<td>1.1.12</td>
</tr>
<tr>
<td>Depends:</td>
<td>R (&ge; 3.6)</td>
</tr>
<tr>
<td>Imports:</td>
<td>methods, <a href="../data.table/index.html">data.table</a> (&ge; 1.11.8), <a href="../tidyr/index.html">tidyr</a>, <a href="../lubridate/index.html">lubridate</a> (&ge; 1.7.4), <a href="../wyz.code.offensiveProgramming/index.html">wyz.code.offensiveProgramming</a> (&ge; 1.1.17), <a href="../crayon/index.html">crayon</a>, utils, stats</td>
</tr>
<tr>
<td>Suggests:</td>
<td><a href="../testthat/index.html">testthat</a>, <a href="../knitr/index.html">knitr</a>, <a href="../rmarkdown/index.html">rmarkdown</a></td>
</tr>
<tr>
<td>Published:</td>
<td>2020-04-22</td>
</tr>
<tr>
<td>Author:</td>
<td>Fabien Gelineau</td>
</tr>
<tr>
<td>Maintainer:</td>
<td>Fabien Gelineau  &#x3c;&#x6e;&#x65;&#x6f;&#x6e;&#x69;&#x72;&#x61;&#x20;&#x61;&#x74;&#x20;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;&#x3e;</td>
</tr>
<tr>
<td>License:</td>
<td><a href="../../licenses/GPL-3">GPL-3</a></td>
</tr>
<tr>
<td>URL:</td>
<td><a href="https://neonira.github.io/offensiveProgrammingBook_v1.2.2">https://neonira.github.io/offensiveProgrammingBook_v1.2.2</a></td>
</tr>
<tr>
<td>NeedsCompilation:</td>
<td>no</td>
</tr>
<tr>
<td>CRAN&nbsp;checks:</td>
<td><a href="../../checks/check_results_wyz.code.metaTesting.html">wyz.code.metaTesting results</a></td>
</tr>
</table>
<h4>Downloads:</h4>
<table summary="Package wyz.code.metaTesting downloads">
<tr>
<td> Reference&nbsp;manual: </td>
<td> <a href="wyz.code.metaTesting.pdf"> wyz.code.metaTesting.pdf </a> </td>
</tr>
<tr>
<td>Vignettes:</td>
<td>
<a href="vignettes/releases.html">wyz.code.metaTesting releases</a><br/>
</td>
</tr>
<tr>
<td> Package&nbsp;source: </td>
<td> <a href="../../../src/contrib/wyz.code.metaTesting_1.1.12.tar.gz"> wyz.code.metaTesting_1.1.12.tar.gz </a> </td>
</tr>
<tr>
<td> Windows&nbsp;binaries: </td>
<td> r-devel: <a href="../../../bin/windows/contrib/4.1/ReadMe">not available</a>, r-release: <a href="../../../bin/windows/contrib/4.0/wyz.code.metaTesting_1.1.12.zip">wyz.code.metaTesting_1.1.12.zip</a>, r-oldrel: <a href="../../../bin/windows/contrib/3.6/wyz.code.metaTesting_1.1.12.zip">wyz.code.metaTesting_1.1.12.zip</a> </td>
</tr>
<tr>
<td> macOS&nbsp;binaries: </td>
<td> r-release: <a href="../../../bin/macosx/contrib/4.0/wyz.code.metaTesting_1.1.12.tgz">wyz.code.metaTesting_1.1.12.tgz</a>, r-oldrel: <a href="../../../bin/macosx/el-capitan/contrib/3.6/wyz.code.metaTesting_1.1.12.tgz">wyz.code.metaTesting_1.1.12.tgz</a> </td>
</tr>
<tr>
<td> Old&nbsp;sources: </td>
<td> <a href="https://CRAN.R-project.org/src/contrib/Archive/wyz.code.metaTesting"> wyz.code.metaTesting archive </a> </td>
</tr>
</table>
<h4>Linking:</h4>
<p>Please use the canonical form
<a href="https://CRAN.R-project.org/package=wyz.code.metaTesting"><samp>https://CRAN.R-project.org/package=wyz.code.metaTesting</samp></a>
to link to this page.</p>
</body>
</html>
